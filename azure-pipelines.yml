# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

name: 3.0$(rev:.r)

trigger:
  branches:
    include:
    - master
  paths:
    include:
    - src/*
    - azure-pipelines.yml

pool:
  vmImage: 'windows-latest'

variables:
  buildConfiguration: 'Release'
  verbosity: 'Normal'

steps:
- task: UseDotNet@2
  displayName: 'Install .NET SDK 6.x'
  inputs:
    packageType: 'sdk'
    version: '6.x'

- task: UseDotNet@2
  displayName: 'Install .NET SDK 9.x'
  inputs:
    packageType: 'sdk'
    version: '9.x'
    installationPath: $(Agent.ToolsDirectory)/dotnet

- task: DotNetCoreCLI@2
  displayName: 'Restore Dependencies'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'
    feedsToUse: 'select'
    verbosityRestore: $(verbosity)

- task: DotNetCoreCLI@2
  displayName: 'Run Unit Tests'
  condition: succeeded()
  inputs:
    command: test
    projects: 'test/**/*.csproj'
    arguments: '--configuration $(BuildConfiguration) --verbosity $(verbosity) --filter "Category!=Sample" --collect "Code Coverage" --settings "test/Serilog.Sinks.XUnit.Tests/CodeCoverage.runsettings"'
    publishTestResults: true

- task: DotNetCoreCLI@2
  displayName: 'Build All Projects (master)'
  inputs:
    command: build
    projects: 'src/**/*.csproj'
    arguments: '--configuration $(BuildConfiguration) --verbosity $(verbosity)'
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

- task: DotNetCoreCLI@2
  displayName: 'Create NuGet Packages'
  inputs:
    command: 'pack'
    packagesToPack: 'src/**/*.csproj'
    versioningScheme: 'byBuildNumber'
    verbosityPack: $(verbosity)
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

- task: NuGetCommand@2
  inputs:
    command: 'push'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg'
    nuGetFeedType: 'external'
    publishFeedCredentials: 'NuGet'
    verbosityPush: $(verbosity)
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
